apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab
  namespace: rds-git
  labels:
    app: gitlab
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: gitlab
  template:
    metadata:
      labels:
        app: gitlab
    spec:
      serviceAccountName: prometheus-sa
      initContainers:
        - name: fix-permissions
          image: alpine:3.18
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
            - |
              chown -R 998:998 /var/opt/gitlab || echo "warn: chown fail"
              chmod -R 755 /var/opt/gitlab || echo "warn: chmod fail"
              chown -R 998:998 /var/opt/gitlab/git-data || echo "warn: chown git-data"
              chmod -R 755 /var/opt/gitlab/git-data || echo "warn: chmod git-data"
              chown -R 998:998 /var/opt/gitlab/backups || echo "warn: chown backups"
              chmod -R 755 /var/opt/gitlab/backups || echo "warn: chmod backups"
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - mountPath: /var/opt/gitlab
              name: gitlab-storage
            - mountPath: /var/opt/gitlab/backups
              name: gitlab-backup-volume
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"

      containers:
        - name: gitlab
          image: "{{ .Values.image.repository }}{{- if .Values.image.tag }}:{{ .Values.image.tag }}{{- end }}"
          imagePullPolicy: Always
          env:
            - name: POSTGRESQL_HOST
              value: "{{ .Values.externalPostgresql.host }}"
            - name: POSTGRESQL_USER
              value: "{{ .Values.externalPostgresql.username }}"
            - name: POSTGRESQL_DB
              value: "{{ .Values.externalPostgresql.database }}"
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gitlab-postgres-secret
                  key: password
            - name: SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: smtp-secret
                  key: email
            - name: SMTP_PASS
              valueFrom:
                secretKeyRef:
                  name: smtp-secret
                  key: password
            - name: GITLAB_SECRETS_DB_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: gitlab-secret
                  key: secret_key_base
            - name: GITLAB_OMNIBUS_CONFIG
              value: |
                external_url 'http://{{ (index .Values.ingress.hosts 0).host }}';
                gitlab_rails['db_adapter'] = 'postgresql';
                gitlab_rails['db_host'] = "$(POSTGRESQL_HOST)";
                gitlab_rails['db_port'] = {{ .Values.externalPostgresql.port }};
                gitlab_rails['db_database'] = "$(POSTGRESQL_DB)";
                gitlab_rails['db_username'] = "$(POSTGRESQL_USER)";
                gitlab_rails['db_password'] = "$(POSTGRESQL_PASSWORD)";
                gitlab_rails['backup_path'] = "/var/opt/gitlab/backups";
                nginx['listen_port'] = 80;

                gitlab_rails['smtp_enable'] = true;
                gitlab_rails['smtp_address'] = 'smtp.gmail.com';
                gitlab_rails['smtp_port'] = 587;
                gitlab_rails['smtp_user_name'] = "$(SMTP_USER)";
                gitlab_rails['smtp_password'] = "$(SMTP_PASS)";
                gitlab_rails['smtp_domain'] = 'smtp.gmail.com';
                gitlab_rails['smtp_authentication'] = 'login';
                gitlab_rails['smtp_enable_starttls_auto'] = true;
                gitlab_rails['gitlab_email_from'] = "$(SMTP_USER)";
                gitlab_rails['gitlab_email_reply_to'] = "$(SMTP_USER)";
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /var/opt/gitlab
              name: gitlab-storage
            - mountPath: /var/opt/gitlab/backups
              name: gitlab-backup-volume
            - mountPath: /etc/gitlab
              name: gitlab-config
            - mountPath: /etc/ssh
              name: ssh-volume
          livenessProbe:
            httpGet:
              path: /help
              port: http
            initialDelaySeconds: 300
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /help
              port: http
            initialDelaySeconds: 180
            periodSeconds: 20
            timeoutSeconds: 10
            failureThreshold: 10
          resources:
            requests:
              memory: "{{ .Values.resources.requests.memory }}"
              cpu: "{{ .Values.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.resources.limits.memory }}"
              cpu: "{{ .Values.resources.limits.cpu }}"

      volumes:
        - name: gitlab-storage
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default "gitlab-pvc" }}
        - name: gitlab-backup-volume
          persistentVolumeClaim:
            claimName: {{ .Values.backups.existingClaim | default "gitlab-backup-pvc" }}
        - name: gitlab-config
          emptyDir: {}
        - name: ssh-volume
          emptyDir: {}
